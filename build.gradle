plugins {
    id 'com.github.ben-manes.versions' version '0.25.0'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
}

allprojects {
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

}

subprojects {

    apply plugin: 'java'
    apply plugin: "org.javamodularity.moduleplugin"
    sourceCompatibility = JavaVersion.VERSION_12

    ext {
        junit_version = '5.5.2'
        mockito_version = '3.0.0'
        archunit_version = '0.11.0'
        spring_version = '5.1.9.RELEASE'
        spring_boot_version = '2.1.8.RELEASE'
        spring_cloud_version = 'Greenwich.SR3'
        h2_version = '1.4.199'
        postgresql_version = '42.2.8'
        thymeleaf_extras_version = '3.0.4.RELEASE'
        slf4j_version = '2.0.0-alpha0'
        logback_version = '1.3.0-alpha4'
    }

    ext.libs = [
            junit           : [
                    "org.junit.jupiter:junit-jupiter:${junit_version}",
            ],
            mockito_core    : [
                    "org.mockito:mockito-core:${mockito_version}",
            ],
            spring_jdbc     : [
                    "org.springframework:spring-jdbc:${spring_version}",
            ],
            h2              : [
                    "com.h2database:h2:${h2_version}",
            ],
            postgresql      : [
                    "org.postgresql:postgresql:${postgresql_version}",

            ],
            spring_context  : [
                    "org.springframework:spring-context:${spring_version}",
            ],
            thymeleaf_extras: [
                    "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:${thymeleaf_extras_version}"
            ],
            log             : [
                    "org.slf4j:slf4j-api:${slf4j_version}",
                    "ch.qos.logback:logback-core:${logback_version}",
                    "ch.qos.logback:logback-classic:${logback_version}"

            ],
    ]

    dependencies {
        // See https://github.com/java9-modularity/gradle-modules-plugin/issues/97#issuecomment-527264923
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.2'
        testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.5.2'
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }
    }

    jacocoTestReport {
        dependsOn test

        additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
        classDirectories.from = files(sourceSets.main.output)

        reports {
            xml.enabled = false
            csv.enabled = false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    task stage {
        dependsOn build
    }

}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    def jacocoProjects = subprojects.findAll {
        def buildDir = it.getBuildDir()
        def testExecFile = file(buildDir.getAbsolutePath() + '/jacoco/test.exec')
        logger.debug('Looking for JaCoCo test.exec file {}', testExecFile)
        return testExecFile.exists()
    }
    jacocoProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

// Credits: https://discuss.gradle.org/t/merge-jacoco-coverage-reports-for-multiproject-setups/12100/10
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoMergeAll)

    additionalSourceDirs.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =
            files(subprojects.sourceSets.main.output)
    executionData.from =
            files("${buildDir}/jacoco/jacocoMergeAll.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}